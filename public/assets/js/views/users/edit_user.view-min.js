let textPasswordString=document.getElementById("password_string"),textConfirmPasswordString=document.getElementById("confirm_password_string"),checkChangePassword=document.getElementById("check_change_password"),passwordErrorDiv=document.getElementById("password_error"),buttonSubmit=document.getElementById("btn_submit");function resetPasswordFields(){textPasswordString.value="",textConfirmPasswordString.value="",passwordErrorDiv.innerText="",textPasswordString.classList.remove("is-invalid","is-valid"),textConfirmPasswordString.classList.remove("is-invalid","is-valid")}function disablePasswordFields(s=!0){textConfirmPasswordString.disabled=s,textPasswordString.disabled=s}function verifyPasswordMatch(s,t){return s===t}function validatePasswords(){let s=textPasswordString.value;verifyPasswordMatch(s,textConfirmPasswordString.value)&&0!==s.length?(passwordErrorDiv.innerText="All good!",textConfirmPasswordString.classList.add("is-valid"),textConfirmPasswordString.classList.remove("is-invalid"),textPasswordString.classList.add("is-valid"),textPasswordString.classList.remove("is-invalid"),buttonSubmit.disabled=!1):(passwordErrorDiv.innerText="Password mismatch or empty.",textPasswordString.classList.add("is-invalid"),textPasswordString.classList.remove("is-valid"),textConfirmPasswordString.classList.add("is-invalid"),textConfirmPasswordString.classList.remove("is-valid"),buttonSubmit.disabled=!0)}checkChangePassword.addEventListener("click",function(){!0===checkChangePassword.checked?(disablePasswordFields(!1),resetPasswordFields(),validatePasswords()):(disablePasswordFields(!0),resetPasswordFields(),!0===buttonSubmit.disabled&&(buttonSubmit.disabled=!1))}),textConfirmPasswordString.addEventListener("keyup",function(){validatePasswords()}),textPasswordString.addEventListener("keyup",function(){validatePasswords()}),disablePasswordFields(!0);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVzZXJzL2VkaXRfdXNlci52aWV3LmpzIl0sIm5hbWVzIjpbInRleHRQYXNzd29yZFN0cmluZyIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJ0ZXh0Q29uZmlybVBhc3N3b3JkU3RyaW5nIiwiY2hlY2tDaGFuZ2VQYXNzd29yZCIsInBhc3N3b3JkRXJyb3JEaXYiLCJidXR0b25TdWJtaXQiLCJyZXNldFBhc3N3b3JkRmllbGRzIiwidmFsdWUiLCJpbm5lclRleHQiLCJjbGFzc0xpc3QiLCJyZW1vdmUiLCJkaXNhYmxlUGFzc3dvcmRGaWVsZHMiLCJzdGF0ZSIsImRpc2FibGVkIiwidmVyaWZ5UGFzc3dvcmRNYXRjaCIsInBhc3N3b3JkIiwiY29uZmlybVBhc3N3b3JkIiwidmFsaWRhdGVQYXNzd29yZHMiLCJsZW5ndGgiLCJhZGQiLCJhZGRFdmVudExpc3RlbmVyIiwiY2hlY2tlZCJdLCJtYXBwaW5ncyI6IkFBQUEsSUFBSUEsbUJBQXFCQyxTQUFTQyxlQUFlLG1CQUM3Q0MsMEJBQTRCRixTQUFTQyxlQUFlLDJCQUNwREUsb0JBQXNCSCxTQUFTQyxlQUFlLHlCQUM5Q0csaUJBQW1CSixTQUFTQyxlQUFlLGtCQUMzQ0ksYUFBZUwsU0FBU0MsZUFBZSxjQUszQyxTQUFTSyxzQkFDTFAsbUJBQW1CUSxNQUFRLEdBQzNCTCwwQkFBMEJLLE1BQVEsR0FDbENILGlCQUFpQkksVUFBWSxHQUU3QlQsbUJBQW1CVSxVQUFVQyxPQUFPLGFBQWMsWUFDbERSLDBCQUEwQk8sVUFBVUMsT0FBTyxhQUFjLFlBRzdELFNBQVNDLHNCQUFzQkMsR0FBUSxHQUNuQ1YsMEJBQTBCVyxTQUFXRCxFQUNyQ2IsbUJBQW1CYyxTQUFXRCxFQUdsQyxTQUFTRSxvQkFBb0JDLEVBQVVDLEdBQ25DLE9BQU9ELElBQWFDLEVBR3hCLFNBQVNDLG9CQUNMLElBQUlGLEVBQVdoQixtQkFBbUJRLE1BSTdCTyxvQkFBb0JDLEVBSEhiLDBCQUEwQkssUUFHMkIsSUFBcEJRLEVBQVNHLFFBVzVEZCxpQkFBaUJJLFVBQVksWUFDN0JOLDBCQUEwQk8sVUFBVVUsSUFBSSxZQUN4Q2pCLDBCQUEwQk8sVUFBVUMsT0FBTyxjQUMzQ1gsbUJBQW1CVSxVQUFVVSxJQUFJLFlBQ2pDcEIsbUJBQW1CVSxVQUFVQyxPQUFPLGNBRXBDTCxhQUFhUSxVQUFXLElBaEJ4QlQsaUJBQWlCSSxVQUFZLDhCQUU3QlQsbUJBQW1CVSxVQUFVVSxJQUFJLGNBQ2pDcEIsbUJBQW1CVSxVQUFVQyxPQUFPLFlBQ3BDUiwwQkFBMEJPLFVBQVVVLElBQUksY0FDeENqQiwwQkFBMEJPLFVBQVVDLE9BQU8sWUFDM0NMLGFBQWFRLFVBQVcsR0FvQmhDVixvQkFBb0JpQixpQkFBaUIsUUFBUyxZQUNOLElBQWhDakIsb0JBQW9Ca0IsU0FDcEJWLHVCQUFzQixHQUN0Qkwsc0JBQ0FXLHNCQUVBTix1QkFBc0IsR0FDdEJMLHVCQUM4QixJQUExQkQsYUFBYVEsV0FDYlIsYUFBYVEsVUFBVyxNQUlwQ1gsMEJBQTBCa0IsaUJBQWlCLFFBQVMsV0FDaERILHNCQUVKbEIsbUJBQW1CcUIsaUJBQWlCLFFBQVMsV0FDekNILHNCQVFKTix1QkFBc0IiLCJzb3VyY2VzQ29udGVudCI6WyJsZXQgdGV4dFBhc3N3b3JkU3RyaW5nID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Bhc3N3b3JkX3N0cmluZycpO1xyXG5sZXQgdGV4dENvbmZpcm1QYXNzd29yZFN0cmluZyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjb25maXJtX3Bhc3N3b3JkX3N0cmluZycpO1xyXG5sZXQgY2hlY2tDaGFuZ2VQYXNzd29yZCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY2hlY2tfY2hhbmdlX3Bhc3N3b3JkXCIpO1xyXG5sZXQgcGFzc3dvcmRFcnJvckRpdiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicGFzc3dvcmRfZXJyb3JcIik7XHJcbmxldCBidXR0b25TdWJtaXQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImJ0bl9zdWJtaXRcIik7XHJcblxyXG4vKipcclxuICogUmVzZXQgdGhlIHBhc3N3b3JkIGFuZCBjb25maXJtIHBhc3N3b3JkIGZpZWxkcyBhbmQgZXJyb3IgbWVzc2FnZS5cclxuICovXHJcbmZ1bmN0aW9uIHJlc2V0UGFzc3dvcmRGaWVsZHMoKSB7XHJcbiAgICB0ZXh0UGFzc3dvcmRTdHJpbmcudmFsdWUgPSBcIlwiO1xyXG4gICAgdGV4dENvbmZpcm1QYXNzd29yZFN0cmluZy52YWx1ZSA9IFwiXCI7XHJcbiAgICBwYXNzd29yZEVycm9yRGl2LmlubmVyVGV4dCA9IFwiXCI7XHJcblxyXG4gICAgdGV4dFBhc3N3b3JkU3RyaW5nLmNsYXNzTGlzdC5yZW1vdmUoXCJpcy1pbnZhbGlkXCIsIFwiaXMtdmFsaWRcIik7XHJcbiAgICB0ZXh0Q29uZmlybVBhc3N3b3JkU3RyaW5nLmNsYXNzTGlzdC5yZW1vdmUoXCJpcy1pbnZhbGlkXCIsIFwiaXMtdmFsaWRcIik7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGRpc2FibGVQYXNzd29yZEZpZWxkcyhzdGF0ZSA9IHRydWUpIHtcclxuICAgIHRleHRDb25maXJtUGFzc3dvcmRTdHJpbmcuZGlzYWJsZWQgPSBzdGF0ZTtcclxuICAgIHRleHRQYXNzd29yZFN0cmluZy5kaXNhYmxlZCA9IHN0YXRlO1xyXG59XHJcblxyXG5mdW5jdGlvbiB2ZXJpZnlQYXNzd29yZE1hdGNoKHBhc3N3b3JkLCBjb25maXJtUGFzc3dvcmQpIHtcclxuICAgIHJldHVybiBwYXNzd29yZCA9PT0gY29uZmlybVBhc3N3b3JkO1xyXG59XHJcblxyXG5mdW5jdGlvbiB2YWxpZGF0ZVBhc3N3b3JkcygpIHtcclxuICAgIGxldCBwYXNzd29yZCA9IHRleHRQYXNzd29yZFN0cmluZy52YWx1ZTtcclxuICAgIGxldCBjb25maXJtUGFzc3dvcmQgPSB0ZXh0Q29uZmlybVBhc3N3b3JkU3RyaW5nLnZhbHVlO1xyXG5cclxuXHJcbiAgICBpZiAoIXZlcmlmeVBhc3N3b3JkTWF0Y2gocGFzc3dvcmQsIGNvbmZpcm1QYXNzd29yZCkgfHwgcGFzc3dvcmQubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgcGFzc3dvcmRFcnJvckRpdi5pbm5lclRleHQgPSBcIlBhc3N3b3JkIG1pc21hdGNoIG9yIGVtcHR5LlwiO1xyXG5cclxuICAgICAgICB0ZXh0UGFzc3dvcmRTdHJpbmcuY2xhc3NMaXN0LmFkZCgnaXMtaW52YWxpZCcpO1xyXG4gICAgICAgIHRleHRQYXNzd29yZFN0cmluZy5jbGFzc0xpc3QucmVtb3ZlKCdpcy12YWxpZCcpO1xyXG4gICAgICAgIHRleHRDb25maXJtUGFzc3dvcmRTdHJpbmcuY2xhc3NMaXN0LmFkZCgnaXMtaW52YWxpZCcpO1xyXG4gICAgICAgIHRleHRDb25maXJtUGFzc3dvcmRTdHJpbmcuY2xhc3NMaXN0LnJlbW92ZSgnaXMtdmFsaWQnKTtcclxuICAgICAgICBidXR0b25TdWJtaXQuZGlzYWJsZWQgPSB0cnVlO1xyXG5cclxuXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIHBhc3N3b3JkRXJyb3JEaXYuaW5uZXJUZXh0ID0gXCJBbGwgZ29vZCFcIjtcclxuICAgICAgICB0ZXh0Q29uZmlybVBhc3N3b3JkU3RyaW5nLmNsYXNzTGlzdC5hZGQoJ2lzLXZhbGlkJyk7XHJcbiAgICAgICAgdGV4dENvbmZpcm1QYXNzd29yZFN0cmluZy5jbGFzc0xpc3QucmVtb3ZlKCdpcy1pbnZhbGlkJyk7XHJcbiAgICAgICAgdGV4dFBhc3N3b3JkU3RyaW5nLmNsYXNzTGlzdC5hZGQoJ2lzLXZhbGlkJyk7XHJcbiAgICAgICAgdGV4dFBhc3N3b3JkU3RyaW5nLmNsYXNzTGlzdC5yZW1vdmUoJ2lzLWludmFsaWQnKTtcclxuXHJcbiAgICAgICAgYnV0dG9uU3VibWl0LmRpc2FibGVkID0gZmFsc2U7XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5cclxuLyoqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4gKiBFVkVOVCBMSVNURU5FUlNcclxuICoqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0qL1xyXG5cclxuY2hlY2tDaGFuZ2VQYXNzd29yZC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZnVuY3Rpb24gKCkge1xyXG4gICAgaWYgKGNoZWNrQ2hhbmdlUGFzc3dvcmQuY2hlY2tlZCA9PT0gdHJ1ZSkge1xyXG4gICAgICAgIGRpc2FibGVQYXNzd29yZEZpZWxkcyhmYWxzZSk7XHJcbiAgICAgICAgcmVzZXRQYXNzd29yZEZpZWxkcygpO1xyXG4gICAgICAgIHZhbGlkYXRlUGFzc3dvcmRzKCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIGRpc2FibGVQYXNzd29yZEZpZWxkcyh0cnVlKTtcclxuICAgICAgICByZXNldFBhc3N3b3JkRmllbGRzKCk7XHJcbiAgICAgICAgaWYgKGJ1dHRvblN1Ym1pdC5kaXNhYmxlZCA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICBidXR0b25TdWJtaXQuZGlzYWJsZWQgPSBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0pO1xyXG50ZXh0Q29uZmlybVBhc3N3b3JkU3RyaW5nLmFkZEV2ZW50TGlzdGVuZXIoXCJrZXl1cFwiLCBmdW5jdGlvbiAoKSB7XHJcbiAgICB2YWxpZGF0ZVBhc3N3b3JkcygpO1xyXG59KTtcclxudGV4dFBhc3N3b3JkU3RyaW5nLmFkZEV2ZW50TGlzdGVuZXIoXCJrZXl1cFwiLCBmdW5jdGlvbiAoKSB7XHJcbiAgICB2YWxpZGF0ZVBhc3N3b3JkcygpO1xyXG59KTtcclxuXHJcblxyXG4vKiogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbiAqIFNUQVJUVVAgQ0FMTFNcclxuICoqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0qL1xyXG5cclxuZGlzYWJsZVBhc3N3b3JkRmllbGRzKHRydWUpOyJdfQ==